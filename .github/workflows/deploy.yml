name: Build and Deploy Multi-Service Application

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  EKS_CLUSTER_NAME: skay-cluster

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      api: ${{ steps.changes.outputs.api }}
      admin: ${{ steps.changes.outputs.admin }}
      any_changes: ${{ steps.changes.outputs.any_changes }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          frontend:
            - 'frontend/**'
            - 'src/**'
            - 'Dockerfile'
            - 'nginx.conf'
          api:
            - 'api-service/**'
          admin:
            - 'admin-panel/**'
          any_changes:
            - '**'

  build-frontend:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.any_changes == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build and push frontend
      run: |
        # Check if frontend directory exists, otherwise use root
        if [ -d "frontend" ]; then
          cd frontend
        fi
        
        # Build the frontend image
        docker buildx create --use --name multiarch || true
        docker buildx build --platform linux/amd64 \
          -t ${{ steps.login-ecr.outputs.registry }}/skay-cybersec-website:${{ github.sha }} \
          -t ${{ steps.login-ecr.outputs.registry }}/skay-cybersec-website:latest \
          --push .

  build-api:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build and push API service
      run: |
        if [ -d "api-service" ] && [ -f "api-service/Dockerfile" ]; then
          cd api-service
          docker buildx create --use --name multiarch || true
          docker buildx build --platform linux/amd64 \
            -t ${{ steps.login-ecr.outputs.registry }}/skay-api-service:${{ github.sha }} \
            -t ${{ steps.login-ecr.outputs.registry }}/skay-api-service:latest \
            --push .
        else
          echo "API service not ready for deployment"
        fi

  build-admin:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.admin == 'true' || needs.detect-changes.outputs.any_changes == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build and push admin panel
      run: |
        if [ -d "admin-panel" ] && [ -f "admin-panel/Dockerfile" ]; then
          cd admin-panel
          docker buildx create --use --name multiarch || true
          docker buildx build --platform linux/amd64 \
            -t ${{ steps.login-ecr.outputs.registry }}/skay-admin-panel:${{ github.sha }} \
            -t ${{ steps.login-ecr.outputs.registry }}/skay-admin-panel:latest \
            --push .
        else
          echo "Admin panel not ready for deployment"
        fi
        
  deploy:
  
    needs: [build-frontend, build-api, build-admin]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') && (needs.build-api.result == 'success' || needs.build-api.result == 'skipped') && (needs.build-admin.result == 'success' || needs.build-admin.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
    - name: Deploy to Kubernetes
      run: |
        # Apply namespace first
        kubectl apply -f k8s/namespace.yaml
        
        # Apply secrets if they exist
        if [ -d "k8s/secrets" ]; then
          kubectl apply -f k8s/secrets/ || true
        fi
        
        # Apply frontend deployment (core service)
        kubectl apply -f k8s/deployment.yaml || kubectl apply -f k8s/frontend/ || true
        kubectl apply -f k8s/service.yaml || true
        
        # Apply API service if it exists
        if [ -f "k8s/api-service/deployment.yaml" ]; then
          kubectl apply -f k8s/api-service/ || true
        fi
        
        # Apply admin panel if it exists  
        if [ -f "k8s/admin-panel/deployment.yaml" ]; then
          kubectl apply -f k8s/admin-panel/ || true
        fi
        
        # Apply ingress (use fixed version)
        kubectl apply -f k8s/admin-system.yaml || kubectl apply -f k8s/ingress.yaml || true
        
        # Wait for main deployment
        kubectl rollout status deployment/cybersec-website -n cybersec-website --timeout=600s || true
        
        # Show status
        echo "=== Deployment Status ==="
        kubectl get pods -n cybersec-website
        kubectl get svc -n cybersec-website  
        kubectl get ingress -n cybersec-website

name: Build and Deploy Multi-Service Application

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  EKS_CLUSTER_NAME: skay-cluster

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      api: ${{ steps.changes.outputs.api }}
      admin: ${{ steps.changes.outputs.admin }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          frontend:
            - 'frontend/**'
          api:
            - 'api-service/**'
          admin:
            - 'admin-panel/**'

  build-frontend:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build and push frontend
      run: |
        cd frontend
        docker buildx build --platform linux/amd64 \
          -t ${{ steps.login-ecr.outputs.registry }}/skay-cybersec-website:${{ github.sha }} \
          -t ${{ steps.login-ecr.outputs.registry }}/skay-cybersec-website:latest \
          --push .

  build-api:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build and push API service
      run: |
        cd api-service
        docker buildx build --platform linux/amd64 \
          -t ${{ steps.login-ecr.outputs.registry }}/skay-api-service:${{ github.sha }} \
          -t ${{ steps.login-ecr.outputs.registry }}/skay-api-service:latest \
          --push .

  deploy:
    needs: [build-frontend, build-api]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') && (needs.build-api.result == 'success' || needs.build-api.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
    - name: Deploy to Kubernetes
      run: |
        # Apply secrets first
        kubectl apply -f k8s/secrets/ || true
        
        # Apply namespace
        kubectl apply -f k8s/namespace.yaml
        
        # Apply main frontend deployment
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        
        # Apply API service deployment
        kubectl apply -f k8s/api-service/deployment.yaml
        kubectl apply -f k8s/api-service/service.yaml
        
        # Apply ingress (must be last)
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for deployments
        kubectl rollout status deployment/cybersec-website -n cybersec-website --timeout=600s
        kubectl rollout status deployment/api-service -n cybersec-website --timeout=600s
        
        # Show status
        echo "=== Deployment Status ==="
        kubectl get pods -n cybersec-website
        kubectl get svc -n cybersec-website
        kubectl get ingress -n cybersec-website

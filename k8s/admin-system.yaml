# k8s/admin-system.yaml - COPY THIS ENTIRE CONTENT

# Admin Panel Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-panel
  namespace: cybersec-website
  labels:
    app: admin-panel
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: admin-panel
  template:
    metadata:
      labels:
        app: admin-panel
        version: v1
    spec:
      containers:
      - name: admin-panel
        image: 588402992108.dkr.ecr.ap-south-1.amazonaws.com/skay-admin-panel:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: supabase-secret
              key: url
        - name: SUPABASE_ANON_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-secret
              key: anon-key
        - name: SUPABASE_SERVICE_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-secret
              key: service-key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: ADMIN_SESSION_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: admin-session-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /var/log/app
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
---
# Admin Panel Service
apiVersion: v1
kind: Service
metadata:
  name: admin-panel-service
  namespace: cybersec-website
  labels:
    app: admin-panel
spec:
  type: ClusterIP
  ports:
  - port: 3001
    targetPort: 3001
    protocol: TCP
    name: http
  selector:
    app: admin-panel
---
# Enhanced API Service for Admin Operations
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-service
  namespace: cybersec-website
  labels:
    app: api-service
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: api-service
  template:
    metadata:
      labels:
        app: api-service
        version: v1
    spec:
      containers:
      - name: api
        image: 588402992108.dkr.ecr.ap-south-1.amazonaws.com/skay-api-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: supabase-secret
              key: url
        - name: SUPABASE_ANON_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-secret
              key: anon-key
        - name: SUPABASE_SERVICE_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-secret
              key: service-key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: redis-url
        - name: RATE_LIMIT_REDIS
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "150m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /var/log/app
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
---
# API Service (unchanged)
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: cybersec-website
  labels:
    app: api-service
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: api-service
---
# Additional App Secrets
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: cybersec-website
type: Opaque
stringData:
  jwt-secret: "e4f00d2ce5eb07ff6e1317c3008d2efef7eedaf66eed0085041cf7fb4b6a3faf"
  admin-session-secret: "5f87599d0bfd2ce909b8a2e6c1855bb9c2a9f632e83250492971870b221d1c37"
  redis-url: "redis://redis-service:6379"
---
# Enhanced Ingress with Admin Portal Routing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cybersec-website-ingress
  namespace: cybersec-website
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    # Admin portal specific security
    nginx.ingress.kubernetes.io/configuration-snippet: |
      location /admin {
        limit_req zone=admin burst=5 nodelay;
        limit_req_status 429;
        
        # Additional security headers for admin
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';" always;
      }
    # Rate limiting zones
    nginx.ingress.kubernetes.io/server-snippet: |
      limit_req_zone $binary_remote_addr zone=admin:10m rate=10r/m;
      limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
      limit_req_zone $binary_remote_addr zone=general:10m rate=1000r/m;
spec:
  rules:
  - http:
      paths:
      # Admin Portal Routes (highest priority)
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: admin-panel-service
            port:
              number: 3001
      # API Routes (second priority)
      - path: /api/admin
        pathType: Prefix
        backend:
          service:
            name: api-service
            port:
              number: 3000
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-service
            port:
              number: 3000
      # Main Website (catch-all, lowest priority)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cybersec-website-service
            port:
              number: 80
---
# Redis for session management and rate limiting
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: cybersec-website
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: cybersec-website
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: redis
---
# Network Policy for Admin Portal (Optional but recommended)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: admin-panel-network-policy
  namespace: cybersec-website
spec:
  podSelector:
    matchLabels:
      app: admin-panel
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3001
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: api-service
    ports:
    - protocol: TCP
      port: 3000
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS for Supabase
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
